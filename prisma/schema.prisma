generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) @map("Id")
  createAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt DateTime @updatedAt @map("UpdatedAt")

  email    String @unique @map("Email")
  password String @map("Password")

  name       String @unique @map("Name")
  avatarPath String @map("AvatarPath")

  phone String @default("") @map("Phone")

  reviews   Review[]
  favorites Product[]
}

model Product {
  id        Int      @id(map: "PK_Products") @default(autoincrement()) @map("Id")
  createAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt DateTime @updatedAt @map("UpdatedAt")

  name        String @unique @map("Name")
  slug        String @unique @map("Slug")
  description String @map("Description") @db.NVarChar(Max)
  image       String @default("N'", map: "DF__Products__ImageS__0A9D95DB") @map("ImageSrc") @db.NVarChar(Max)
  price       Int    @default(0, map: "DF__Products__NewPri__0B91BA14") @map("NewPrice")

  //orderItems OrderItem[]
  reviews    Review[]
  features   Feature[]
  properties Property[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("CategoryId")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("UserId")

  @@map("Products")
}

model Category {
  id        Int      @id @default(autoincrement()) @map("Id")
  createAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt DateTime @updatedAt @map("UpdatedAt")

  name String @unique
  slug String @unique

  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createAt  DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating Int
  text   String

  user   User? @relation(fields: [userId], references: [id], onUpdate: NoAction)
  userId Int?  @map("UserId")

  product   Product @relation(fields: [productId], references: [id], onUpdate: NoAction)
  productId Int     @map("ProductId")
}

model Feature {
  id        Int      @id(map: "PK_Features") @default(autoincrement()) @map("Id")
  createAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt DateTime @updatedAt @map("UpdatedAt")

  name        String  @map("Title") @db.NVarChar(Max)
  image       String  @map("ImageSrc") @db.NVarChar(Max)
  description String  @map("Description") @db.NVarChar(Max)
  productId   Int     @default(0, map: "DF__Feature__Product__7D439ABD") @map("ProductId")
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Features_Products_ProductId")

  @@index([productId], map: "IX_Features_ProductId")
  @@map("Features")
}

model Property {
  id        Int      @id(map: "PK_Properties") @default(autoincrement()) @map("Id")
  createAt  DateTime @default(now()) @map("CreatedAt")
  updatedAt DateTime @updatedAt @map("UpdatedAt")

  name        String  @map("Name") @db.NVarChar(Max)
  description String  @map("Value") @db.NVarChar(Max)
  productId   Int     @default(0, map: "DF__Property__Produc__7C4F7684") @map("ProductId")
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Properties_Products_ProductId")

  @@index([productId], map: "IX_Properties_ProductId")
  @@map("Properties")
}
